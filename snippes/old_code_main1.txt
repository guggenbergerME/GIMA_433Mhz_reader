#include <SPI.h>
#include <Ethernet.h>
#include <PubSubClient.h>
#include <RH_ASK.h> // 433 Mhz

//************************************************************************** 433 Mhz
RH_ASK driver;

//************************************************************************** LAN Network definieren N
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
IPAddress ip(10, 100, 3, 50); //comment this line if you are using DHCP
IPAddress server(10, 100, 0, 20); // mqtt Server
EthernetClient ethClient;

//************************************************************************** mqtt Referenz
PubSubClient client(ethClient);


//************************************************************************** Intervalle
long lastReconnectAttempt = 0;
const int reconnectInterval = 5000;

// mqtt Abfrageintervall
unsigned long previousMillis_mqttCHECK = 0; // 
unsigned long interval_mqttCHECK = 900; 

//************************************************************************** Variablen
long letzte_meldung = 0;
char publish_meldung[50];
int zaehler = 0;

//************************************************************************** Pinout


//************************************************************************** Funktionsprototypen
void loop                       ();
void setup                      ();
void reconnect                  ();
void callback(char* topic, byte* payload, unsigned int length);


//************************************************************************** Zeitschleifen
unsigned long previousMillis_mqtt = 0; // mqtt abrufen
unsigned long interval_mqtt = 50; 

//######################################################################## setup
void setup() {

  // Serielle Schnittstelle
  Serial.begin(115200);


  // Ethernet starten
  Ethernet.begin(mac, ip);
  // Pause Netzwerk Antwort
  delay(1500);

  // Client starten und Callback abrufen
  client.setServer(server, 1883);
  client.setCallback(callback);

    if (!driver.init())
         Serial.println("init failed");


}

// ######################################################################## mqtt callback
void callback(char* topic, byte* payload, unsigned int length) {

    /*
    if (strcmp(topic,"GIMA_Technik/TEST_ARDUINO_LAN/Steuerung")==0) {

        // Kanal A
        if ((char)payload[0] == 'o' && (char)payload[1] == 'n') {  
                 Serial.println("relais_A -> AN");
                  digitalWrite(RELAIS_AUF, !HIGH);
                 delay(10);
              }

        if ((char)payload[0] == 'o' && (char)payload[1] == 'f' && (char)payload[2] == 'f') {  
                 Serial.println("relais_A -> AUS");
                  digitalWrite(RELAIS_AUF, !LOW);
                 delay(10);
              }
      } 
      */
}



// ######################################################################## mqtt reconnect
void reconnect() {
  // Loop until we're reconnected
   while (!client.connected()) {
    /*
    Serial.print("Verbindung zu mqtt IP: ");
    Serial.print(server);
    Serial.println("");
    */
    // Create a random client ID
    String clientId = "GIMA-Technik";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect("GIMA_TEST2", "daten1", "qwerqwer")) {
      Serial.println("mqtt lesen ....");
      // ... and resubscribe
      client.subscribe("GIMA_Technik/TEST_ARDUINO_LAN/Steuerung");
        
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

//######################################################################## loop
void loop() {

/*
  // mqtt Daten senden     
  if (!client.connected()) {
      reconnect();
    }
    client.loop(); 
*/

    uint8_t buf[12];
    uint8_t buflen = sizeof(buf);
    if (driver.recv(buf, &buflen)) // Non-blocking
    {
      Serial.println("reading ..."); 
      int i;
      // Message with a good checksum received, dump it.
      Serial.print("Message: ");
      Serial.println((char*)buf);         
    }
delay(50);
}

